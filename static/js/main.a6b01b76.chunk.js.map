{"version":3,"sources":["apis/postsAPI.js","App.js","reportWebVitals.js","index.js"],"names":["dcardRequest","axios","create","baseURL","PROXY_URL","App","React","useState","posts","setPosts","page","setPage","isFetching","setIsFetching","fetchMorePosts","a","idOfLastPost","length","id","beforePostId","get","params","popular","before","data","map","post","title","excerpt","window","console","error","useEffect","loader","useRef","handleObserver","entities","isIntersecting","prevPage","observer","IntersectionObserver","root","rootMargin","threshold","current","observe","className","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAKMA,E,OAAeC,EAAMC,OAAO,CAChCC,QAASC,+D,OCoEIC,MAtEf,WAAgB,IAAD,EACaC,IAAMC,SAAS,IAD5B,mBACNC,EADM,KACCC,EADD,OAEWH,IAAMC,SAAS,GAF1B,mBAENG,EAFM,KAEAC,EAFA,OAGuBL,IAAMC,UAAS,GAHtC,mBAGNK,EAHM,KAGMC,EAHN,KAKPC,EAAc,uCAAG,kCAAAC,EAAA,0DACjBH,EADiB,wDAGrBC,GAAc,GAHO,SAKbG,EAAeR,EAAMS,OAAS,EAAIT,EAAMA,EAAMS,OAAS,GAAGC,GAAK,KALlD,SDAGC,ECMkBH,EDL5ChB,EAAaoB,IAAI,SAAU,CACzBC,OAAQ,CACNC,SAAS,EACTC,OAAQJ,KCJW,oBAMXK,YANW,MAMJ,GANI,EAQnBf,EAAS,GAAD,mBACHD,GADG,YAEHgB,EAAKC,KAAI,SAACC,GAAD,MAAW,CACrBR,GAAIQ,EAAKR,GACTS,MAAOD,EAAKC,MACZC,QAASF,EAAKE,eAbC,kDAiBnBC,OAAOC,QAAQC,MAAf,MAjBmB,QAmBrBlB,GAAc,GAnBO,kCDAE,IAACM,ICAH,qBAAH,qDAsBpBb,IAAM0B,WAAU,WACdlB,MACC,CAACJ,IAEJ,IAAMuB,EAAS3B,IAAM4B,OAAO,MAEtBC,EAAiB,SAACC,GACPA,EAAS,GACbC,gBACT1B,GAAQ,SAAC2B,GAAD,OAAcA,EAAW,MAkBrC,OAdAhC,IAAM0B,WAAU,WACd,IAOMO,EAAW,IAAIV,OAAOW,qBAAqBL,EAPjC,CACdM,KAAM,KACNC,WAAY,OACZC,UAAW,IAKTV,EAAOW,SACTL,EAASM,QAAQZ,EAAOW,WAEzB,IAGD,iCACGpC,EAAMiB,KAAI,SAACC,GAAD,OACT,oCACE,6BAAKA,EAAKC,QACV,4BAAID,EAAKE,YAFGF,EAAKR,OAMrB,qBAAK4B,UAAU,UAAUC,IAAKd,EAA9B,SACE,kDCxDOe,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a6b01b76.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst PROXY_URL = 'https://eason-proxy.herokuapp.com/'\nconst DCARD_API_URL = 'https://www.dcard.tw/v2/'\n\nconst dcardRequest = axios.create({\n  baseURL: PROXY_URL + DCARD_API_URL\n})\n\nexport const apiGetPosts = (beforePostId) =>\n  dcardRequest.get('/posts', {\n    params: {\n      popular: true,\n      before: beforePostId\n    }\n  })\n","import React from 'react'\n\nimport { apiGetPosts } from './apis/postsAPI'\n\nfunction App() {\n  const [posts, setPosts] = React.useState([])\n  const [page, setPage] = React.useState(1)\n  const [isFetching, setIsFetching] = React.useState(false)\n\n  const fetchMorePosts = async () => {\n    if (isFetching) return\n\n    setIsFetching(true)\n    try {\n      const idOfLastPost = posts.length > 0 ? posts[posts.length - 1].id : null\n      const { data = [] } = await apiGetPosts(idOfLastPost)\n\n      setPosts([\n        ...posts,\n        ...data.map((post) => ({\n          id: post.id,\n          title: post.title,\n          excerpt: post.excerpt\n        }))\n      ])\n    } catch (err) {\n      window.console.error(err)\n    }\n    setIsFetching(false)\n  }\n\n  React.useEffect(() => {\n    fetchMorePosts()\n  }, [page])\n\n  const loader = React.useRef(null)\n\n  const handleObserver = (entities) => {\n    const target = entities[0]\n    if (target.isIntersecting) {\n      setPage((prevPage) => prevPage + 1)\n    }\n  }\n\n  React.useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '20px',\n      threshold: 1.0\n    }\n    // initialize IntersectionObserver\n    // and attaching to Load More div\n    const observer = new window.IntersectionObserver(handleObserver, options)\n    if (loader.current) {\n      observer.observe(loader.current)\n    }\n  }, [])\n\n  return (\n    <main>\n      {posts.map((post) => (\n        <article key={post.id}>\n          <h2>{post.title}</h2>\n          <p>{post.excerpt}</p>\n        </article>\n      ))}\n\n      <div className='loading' ref={loader}>\n        <h2>Loading...</h2>\n      </div>\n    </main>\n  )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}