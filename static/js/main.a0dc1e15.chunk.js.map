{"version":3,"sources":["apis/postsAPI.js","components/Page.js","components/PostsContainer.js","components/Post.js","components/Loader.js","App.js","reportWebVitals.js","index.js"],"names":["dcardRequest","axios","create","baseURL","PROXY_URL","Page","styled","div","PostsContainer","main","Post","article","Loader","React","forwardRef","props","ref","StyledLoader","App","useState","posts","setPosts","page","setPage","isFetching","setIsFetching","fetchMorePosts","a","idOfLastPost","length","id","beforePostId","get","params","popular","before","data","map","post","title","excerpt","window","console","error","useEffect","loader","useRef","handleObserver","entities","isIntersecting","prevPage","observer","IntersectionObserver","root","rootMargin","threshold","current","observe","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAKMA,E,OAAeC,EAAMC,OAAO,CAChCC,QAASC,+D,cCKIC,EATFC,UAAOC,IAAV,2KCUKC,EAVQF,UAAOG,KAAV,2LCaLC,EAbFJ,UAAOK,QAAV,qM,eCGJC,EAASC,IAAMC,YAAW,SAACC,EAAOC,GAAR,OAC9B,8CAAKA,IAAKA,GAASD,GAAnB,cACE,wBACA,wBACA,wBACA,+BA8DWE,EA1DMX,kBAAOM,EAAPN,CAAH,+lCCiEHY,MAtEf,WAAgB,IAAD,EACaL,IAAMM,SAAS,IAD5B,mBACNC,EADM,KACCC,EADD,OAEWR,IAAMM,SAAS,GAF1B,mBAENG,EAFM,KAEAC,EAFA,OAGuBV,IAAMM,UAAS,GAHtC,mBAGNK,EAHM,KAGMC,EAHN,KAKPC,EAAc,uCAAG,kCAAAC,EAAA,0DACjBH,EADiB,wDAGrBC,GAAc,GAHO,SAKbG,EAAeR,EAAMS,OAAS,EAAIT,EAAMA,EAAMS,OAAS,GAAGC,GAAK,KALlD,SLLGC,EKWkBH,ELV5C5B,EAAagC,IAAI,SAAU,CACzBC,OAAQ,CACNC,SAAS,EACTC,OAAQJ,KKCW,oBAMXK,YANW,MAMJ,GANI,EAQnBf,EAAS,GAAD,mBACHD,GADG,YAEHgB,EAAKC,KAAI,SAACC,GAAD,MAAW,CACrBR,GAAIQ,EAAKR,GACTS,MAAOD,EAAKC,MACZC,QAASF,EAAKE,eAbC,kDAiBnBC,OAAOC,QAAQC,MAAf,MAjBmB,QAmBrBlB,GAAc,GAnBO,kCLLE,IAACM,IKKH,qBAAH,qDAsBpBlB,IAAM+B,WAAU,WACdlB,MACC,CAACJ,IAEJ,IAAMuB,EAAShC,IAAMiC,OAAO,MAEtBC,EAAiB,SAACC,GACPA,EAAS,GACbC,gBACT1B,GAAQ,SAAC2B,GAAD,OAAcA,EAAW,MAkBrC,OAdArC,IAAM+B,WAAU,WACd,IAOMO,EAAW,IAAIV,OAAOW,qBAAqBL,EAPjC,CACdM,KAAM,KACNC,WAAY,OACZC,UAAW,IAKTV,EAAOW,SACTL,EAASM,QAAQZ,EAAOW,WAEzB,IAGD,cAAC,EAAD,UACE,eAAC,EAAD,WACGpC,EAAMiB,KAAI,SAACC,GAAD,OACT,eAAC,EAAD,WACE,6BAAKA,EAAKC,QACV,4BAAID,EAAKE,YAFAF,EAAKR,OAMlB,cAAC,EAAD,CAAQd,IAAK6B,UC7DNa,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,YAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a0dc1e15.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst PROXY_URL = 'https://eason-proxy.herokuapp.com/'\nconst DCARD_API_URL = 'https://www.dcard.tw/v2/'\n\nconst dcardRequest = axios.create({\n  baseURL: PROXY_URL + DCARD_API_URL\n})\n\nexport const apiGetPosts = (beforePostId) =>\n  dcardRequest.get('/posts', {\n    params: {\n      popular: true,\n      before: beforePostId\n    }\n  })\n","import styled from 'styled-components'\n\nconst Page = styled.div`\n  min-height: 100vh;\n  box-sizing: border-box;\n  padding: 24px;\n  background-color: #003350;\n  display: flex;\n  justify-content: center;\n`\n\nexport default Page\n","import styled from 'styled-components'\n\nconst PostsContainer = styled.main`\n  padding: 0 24px;\n  background-color: white;\n  width: 100%;\n  max-width: 700px;\n  border-radius: 4px;\n  box-sizing: border-box;\n  height: fit-content;\n`\n\nexport default PostsContainer\n","import styled from 'styled-components'\n\nconst Post = styled.article`\n  padding: 24px;\n\n  & > p {\n    color: #333;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  border-bottom: 1px solid #ccc;\n`\n\nexport default Post\n","// ref: https://loading.io/css/\n\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst Loader = React.forwardRef((props, ref) => (\n  <div ref={ref} {...props}>\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n))\n\nconst StyledLoader = styled(Loader)`\n  display: inline-block;\n  position: relative;\n  width: 80px;\n  height: 80px;\n  left: 50%;\n  transform: translateX(-50%);\n  & div {\n    position: absolute;\n    top: 33px;\n    width: 13px;\n    height: 13px;\n    border-radius: 50%;\n    background: #003350;\n    animation-timing-function: cubic-bezier(0, 1, 1, 0);\n  }\n  & div:nth-child(1) {\n    left: 8px;\n    animation: lds-ellipsis1 0.6s infinite;\n  }\n  & div:nth-child(2) {\n    left: 8px;\n    animation: lds-ellipsis2 0.6s infinite;\n  }\n  & div:nth-child(3) {\n    left: 32px;\n    animation: lds-ellipsis2 0.6s infinite;\n  }\n  & div:nth-child(4) {\n    left: 56px;\n    animation: lds-ellipsis3 0.6s infinite;\n  }\n  @keyframes lds-ellipsis1 {\n    0% {\n      transform: scale(0);\n    }\n    100% {\n      transform: scale(1);\n    }\n  }\n  @keyframes lds-ellipsis3 {\n    0% {\n      transform: scale(1);\n    }\n    100% {\n      transform: scale(0);\n    }\n  }\n  @keyframes lds-ellipsis2 {\n    0% {\n      transform: translate(0, 0);\n    }\n    100% {\n      transform: translate(24px, 0);\n    }\n  }\n`\n\nexport default StyledLoader\n","import React from 'react'\n\nimport { apiGetPosts } from './apis/postsAPI'\n\nimport Page from './components/Page'\nimport PostsContainer from './components/PostsContainer'\nimport Post from './components/Post'\nimport Loader from './components/Loader'\n\nfunction App() {\n  const [posts, setPosts] = React.useState([])\n  const [page, setPage] = React.useState(1)\n  const [isFetching, setIsFetching] = React.useState(false)\n\n  const fetchMorePosts = async () => {\n    if (isFetching) return\n\n    setIsFetching(true)\n    try {\n      const idOfLastPost = posts.length > 0 ? posts[posts.length - 1].id : null\n      const { data = [] } = await apiGetPosts(idOfLastPost)\n\n      setPosts([\n        ...posts,\n        ...data.map((post) => ({\n          id: post.id,\n          title: post.title,\n          excerpt: post.excerpt\n        }))\n      ])\n    } catch (err) {\n      window.console.error(err)\n    }\n    setIsFetching(false)\n  }\n\n  React.useEffect(() => {\n    fetchMorePosts()\n  }, [page])\n\n  const loader = React.useRef(null)\n\n  const handleObserver = (entities) => {\n    const target = entities[0]\n    if (target.isIntersecting) {\n      setPage((prevPage) => prevPage + 1)\n    }\n  }\n\n  React.useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '20px',\n      threshold: 1.0\n    }\n    // initialize IntersectionObserver\n    // and attaching to Load More div\n    const observer = new window.IntersectionObserver(handleObserver, options)\n    if (loader.current) {\n      observer.observe(loader.current)\n    }\n  }, [])\n\n  return (\n    <Page>\n      <PostsContainer>\n        {posts.map((post) => (\n          <Post key={post.id}>\n            <h2>{post.title}</h2>\n            <p>{post.excerpt}</p>\n          </Post>\n        ))}\n\n        <Loader ref={loader} />\n      </PostsContainer>\n    </Page>\n  )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Normalize } from 'styled-normalize'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Normalize />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}