{"version":3,"sources":["apis/postsAPI.js","components/Page.js","components/PostsContainer.js","components/Post.js","components/Loader.js","components/VisibilitySensor.js","App.js","reportWebVitals.js","index.js"],"names":["dcardRequest","axios","create","baseURL","PROXY_URL","Page","styled","div","PostsContainer","main","Post","article","StyledLoader","props","VisibilitySensor","onEnter","children","React","useState","entry","setEntry","useEffect","isIntersecting","sensorRef","useRef","handleObserver","entities","observer","window","IntersectionObserver","root","rootMargin","threshold","current","observe","disconnect","ref","App","posts","setPosts","isFetching","setIsFetching","fetchMorePosts","a","idOfLastPost","length","id","beforePostId","get","params","popular","before","data","prevPosts","map","post","title","excerpt","console","error","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAKMA,E,OAAeC,EAAMC,OAAO,CAChCC,QAASC,+D,cCKIC,EATFC,UAAOC,IAAV,2KCUKC,EAVQF,UAAOG,KAAV,2LCaLC,EAbFJ,UAAOK,QAAV,qM,eCsEKC,EA1DMN,mBATN,SAACO,GAAD,OACb,gDAASA,GAAT,cACE,wBACA,wBACA,wBACA,8BAIiBP,CAAH,4lCCkCHQ,MA7Cf,SAA0BD,GAAQ,IACxBE,EAAsBF,EAAtBE,QAASC,EAAaH,EAAbG,SADc,EAILC,IAAMC,SAAS,IAJV,mBAIxBC,EAJwB,KAIjBC,EAJiB,KAO/BH,IAAMI,WAAU,WACVF,EAAMG,gBACRP,MAED,CAACI,EAAMG,iBAEV,IAAMC,EAAYN,IAAMO,OAAO,MAEzBC,EAAiB,SAACC,GACtBN,EAASM,EAAS,KAiBpB,OAbAT,IAAMI,WAAU,WACd,IAKMM,EAAW,IAAIC,OAAOC,qBAAqBJ,EALjC,CACdK,KAAM,KACNC,WAAY,OACZC,UAAW,IAMb,OAHIT,EAAUU,SACZN,EAASO,QAAQX,EAAUU,SAEtB,kBAAMN,EAASQ,gBACrB,IAEI,qBAAKC,IAAKb,EAAV,SAAsBP,KCkBhBqB,MA5Cf,WAAgB,IAAD,EACapB,IAAMC,SAAS,IAD5B,mBACNoB,EADM,KACCC,EADD,OAEuBtB,IAAMC,UAAS,GAFtC,mBAENsB,EAFM,KAEMC,EAFN,KAIPC,EAAc,uCAAG,kCAAAC,EAAA,0DACjBH,EADiB,wDAGrBC,GAAc,GAHO,SAKbG,EAAeN,EAAMO,OAAS,EAAIP,EAAMA,EAAMO,OAAS,GAAGC,GAAK,KALlD,SNLGC,EMWkBH,ENV5C5C,EAAagD,IAAI,SAAU,CACzBC,OAAQ,CACNC,SAAS,EACTC,OAAQJ,KMCW,oBAMXK,YANW,MAMJ,GANI,EAQnBb,GAAS,SAACc,GAAD,4BACJA,GADI,YAEJD,EAAKE,KAAI,SAACC,GAAD,MAAW,CACrBT,GAAIS,EAAKT,GACTU,MAAOD,EAAKC,MACZC,QAASF,EAAKE,iBAbC,kDAiBnB7B,OAAO8B,QAAQC,MAAf,MAjBmB,QAmBrBlB,GAAc,GAnBO,kCNLE,IAACM,IMKH,qBAAH,qDAsBpB,OACE,cAAC,EAAD,UACE,eAAC,EAAD,WACGT,EAAMgB,KAAI,SAACC,GAAD,OACT,eAAC,EAAD,WACE,6BAAKA,EAAKC,QACV,4BAAID,EAAKE,YAFAF,EAAKT,OAMlB,cAAC,EAAD,CAAkB/B,QAAS2B,EAA3B,SACE,cAAC,EAAD,YCnCKkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,YAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5645ffeb.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst PROXY_URL = 'https://eason-proxy.herokuapp.com/'\nconst DCARD_API_URL = 'https://www.dcard.tw/v2/'\n\nconst dcardRequest = axios.create({\n  baseURL: PROXY_URL + DCARD_API_URL\n})\n\nexport const apiGetPosts = (beforePostId) =>\n  dcardRequest.get('/posts', {\n    params: {\n      popular: true,\n      before: beforePostId\n    }\n  })\n","import styled from 'styled-components'\n\nconst Page = styled.div`\n  min-height: 100vh;\n  box-sizing: border-box;\n  padding: 24px;\n  background-color: #003350;\n  display: flex;\n  justify-content: center;\n`\n\nexport default Page\n","import styled from 'styled-components'\n\nconst PostsContainer = styled.main`\n  padding: 0 24px;\n  background-color: white;\n  width: 100%;\n  max-width: 700px;\n  border-radius: 4px;\n  box-sizing: border-box;\n  height: fit-content;\n`\n\nexport default PostsContainer\n","import styled from 'styled-components'\n\nconst Post = styled.article`\n  padding: 24px;\n\n  & > p {\n    color: #333;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  border-bottom: 1px solid #ccc;\n`\n\nexport default Post\n","// ref: https://loading.io/css/\n\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst Loader = (props) => (\n  <div {...props}>\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n)\n\nconst StyledLoader = styled(Loader)`\n  display: inline-block;\n  position: relative;\n  width: 80px;\n  height: 80px;\n  left: 50%;\n  transform: translateX(-50%);\n  & div {\n    position: absolute;\n    top: 33px;\n    width: 13px;\n    height: 13px;\n    border-radius: 50%;\n    background: #ccc;\n    animation-timing-function: cubic-bezier(0, 1, 1, 0);\n  }\n  & div:nth-child(1) {\n    left: 8px;\n    animation: lds-ellipsis1 0.6s infinite;\n  }\n  & div:nth-child(2) {\n    left: 8px;\n    animation: lds-ellipsis2 0.6s infinite;\n  }\n  & div:nth-child(3) {\n    left: 32px;\n    animation: lds-ellipsis2 0.6s infinite;\n  }\n  & div:nth-child(4) {\n    left: 56px;\n    animation: lds-ellipsis3 0.6s infinite;\n  }\n  @keyframes lds-ellipsis1 {\n    0% {\n      transform: scale(0);\n    }\n    100% {\n      transform: scale(1);\n    }\n  }\n  @keyframes lds-ellipsis3 {\n    0% {\n      transform: scale(1);\n    }\n    100% {\n      transform: scale(0);\n    }\n  }\n  @keyframes lds-ellipsis2 {\n    0% {\n      transform: translate(0, 0);\n    }\n    100% {\n      transform: translate(24px, 0);\n    }\n  }\n`\n\nexport default StyledLoader\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction VisibilitySensor(props) {\n  const { onEnter, children } = props\n\n  // entry object from IntersectionObserver, used to check visibility\n  const [entry, setEntry] = React.useState({})\n\n  // when this component is visible, call onEnter callback\n  React.useEffect(() => {\n    if (entry.isIntersecting) {\n      onEnter()\n    }\n  }, [entry.isIntersecting])\n\n  const sensorRef = React.useRef(null)\n\n  const handleObserver = (entities) => {\n    setEntry(entities[0])\n  }\n\n  // Set up IntersectionObserver\n  React.useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '20px',\n      threshold: 0\n    }\n    const observer = new window.IntersectionObserver(handleObserver, options)\n    if (sensorRef.current) {\n      observer.observe(sensorRef.current)\n    }\n    return () => observer.disconnect()\n  }, [])\n\n  return <div ref={sensorRef}>{children}</div>\n}\n\nVisibilitySensor.propTypes = {\n  /** Callback function, called when this component is visible */\n  onEnter: PropTypes.func.isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node\n  ]).isRequired\n}\n\nexport default VisibilitySensor\n","import React from 'react'\n\nimport { apiGetPosts } from './apis/postsAPI'\n\nimport Page from './components/Page'\nimport PostsContainer from './components/PostsContainer'\nimport Post from './components/Post'\nimport Loader from './components/Loader'\nimport VisibilitySensor from './components/VisibilitySensor'\n\nfunction App() {\n  const [posts, setPosts] = React.useState([])\n  const [isFetching, setIsFetching] = React.useState(false)\n\n  const fetchMorePosts = async () => {\n    if (isFetching) return\n\n    setIsFetching(true)\n    try {\n      const idOfLastPost = posts.length > 0 ? posts[posts.length - 1].id : null\n      const { data = [] } = await apiGetPosts(idOfLastPost)\n\n      setPosts((prevPosts) => [\n        ...prevPosts,\n        ...data.map((post) => ({\n          id: post.id,\n          title: post.title,\n          excerpt: post.excerpt\n        }))\n      ])\n    } catch (err) {\n      window.console.error(err)\n    }\n    setIsFetching(false)\n  }\n\n  return (\n    <Page>\n      <PostsContainer>\n        {posts.map((post) => (\n          <Post key={post.id}>\n            <h2>{post.title}</h2>\n            <p>{post.excerpt}</p>\n          </Post>\n        ))}\n\n        <VisibilitySensor onEnter={fetchMorePosts}>\n          <Loader />\n        </VisibilitySensor>\n      </PostsContainer>\n    </Page>\n  )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Normalize } from 'styled-normalize'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Normalize />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}